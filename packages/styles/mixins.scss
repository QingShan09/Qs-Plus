// 命名空间
$namespace: 'qs' !default;

// 特殊嵌套规则判断
@function hitAllSpecialNestRule($selector) {
  @return contains($selector, '::v-deep') or contains($selector, '::v-slotted') or contains($selector, '::v-global');
}

@function contains($list, $value) {
  @return str-index(inspect($list), $value) != null;
}

// 文本省略
@mixin ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// BEM mixin
@mixin b($block) {
  $B: $namespace + '-' + $block !global;
  .#{$B} {
    @content;
  }
}

@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: '';
  @each $unit in $element {
    $currentSelector: #{$currentSelector + '.' + $B + '__' + $unit + ','};
  }

  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + & + '--' + $unit + ','};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@mixin when($state) {
  @at-root {
    &.is-#{$state} {
      @content;
    }
  }
}

// 多行文本省略
@mixin multi-ellipsis($lines: 2) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
}

// flex 布局
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// 绝对定位居中
@mixin absolute-center($direction: 'both') {
  position: absolute;
  
  @if $direction == 'both' {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if $direction == 'horizontal' {
    left: 50%;
    transform: translateX(-50%);
  } @else if $direction == 'vertical' {
    top: 50%;
    transform: translateY(-50%);
  }
}

// 清除浮动
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// 滚动条样式
@mixin scrollbar($width: 6px, $height: 6px) {
  scrollbar-width: thin;
  scrollbar-color: var(--qs-scrollbar-thumb) var(--qs-scrollbar-track);

  &::-webkit-scrollbar {
    width: $width;
    height: $height;
  }

  &::-webkit-scrollbar-thumb {
    background: var(--qs-scrollbar-thumb);
    border-radius: math.div($width, 2);
  }

  &::-webkit-scrollbar-track {
    background: var(--qs-scrollbar-track);
  }
}

// 禁用文本选择
@mixin disable-select {
  user-select: none;
  -webkit-user-select: none;
}

// 过渡效果
@mixin transition($properties...) {
  $transitions: ();
  @each $property in $properties {
    $transitions: append(
      $transitions,
      $property var(--qs-transition-duration) var(--qs-transition-timing-function),
      comma
    );
  }
  transition: $transitions;
}

// 阴影效果
@mixin box-shadow($level: 'normal') {
  @if $level == 'light' {
    box-shadow: var(--qs-box-shadow-light);
  } @else if $level == 'normal' {
    box-shadow: var(--qs-box-shadow);
  } @else if $level == 'dark' {
    box-shadow: var(--qs-box-shadow-dark);
  }
}

// 响应式断点
@mixin respond-to($breakpoint) {
  @if $breakpoint == 'sm' {
    @media (min-width: 576px) { @content; }
  } @else if $breakpoint == 'md' {
    @media (min-width: 768px) { @content; }
  } @else if $breakpoint == 'lg' {
    @media (min-width: 992px) { @content; }
  } @else if $breakpoint == 'xl' {
    @media (min-width: 1200px) { @content; }
  } @else if $breakpoint == 'xxl' {
    @media (min-width: 1400px) { @content; }
  }
} 